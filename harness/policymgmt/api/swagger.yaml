openapi: 3.0.3
info:
  title: Governance Policy Management API
  description: "Read and manage OPA Governance policies, policy sets and evaluations"
  version: 1.2.0
servers:
- url: https://app.harness.io/gateway/pm/
tags:
- name: dashboard
  description: "Aggregate summary of policies, policy sets and evaluations for display\
    \ on the dashboard"
- name: examples
  description: Example rego policies and corresponding input
- name: policies
  description: "Create, edit and delete Governance policies written in rego"
- name: evaluate
  description: Perform evaluations
- name: evaluations
  description: Access evaluation results
- name: policysets
  description: "Create, edit and delete Governance policy sets"
- name: system
  description: System version and health
paths:
  /api/v1/dashboard:
    get:
      tags:
      - dashboard
      description: "Get metrics about policies, policy sets and evaluations"
      operationId: dashboard#metrics
      parameters:
      - name: range
        in: query
        description: "The time period over which to aggregate dashboard data. Can\
          \ be: 24 hours, 7 days or 30 days"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The time period over which to aggregate dashboard data. Can\
            \ be: 24 hours, 7 days or 30 days"
          example: 30d
          default: 30d
          enum:
          - 24h
          - 7d
          - 30d
        example: 30d
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetrics'
              example:
                aggregates:
                - error: 1201513832267580740
                  pass: 2920020791307846359
                  time: 461119712411546138
                  warning: 6971582622373151866
                - error: 1201513832267580740
                  pass: 2920020791307846359
                  time: 461119712411546138
                  warning: 6971582622373151866
                - error: 1201513832267580740
                  pass: 2920020791307846359
                  time: 461119712411546138
                  warning: 6971582622373151866
                policy_health:
                  total_evaluation_count: 7467880620589340301
                  total_evaluation_entity_count:
                    error: 4962770580155356801
                    pass: 1838564234748219477
                    warning: 6712404284550845579
                  total_policy_count: 1018281497905076142
                  total_policy_set_count: 4767159674574934953
                  total_policy_set_entity_count:
                    A ut.: 8823333786778254735
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/evaluate:
    post:
      tags:
      - evaluate
      description: Evaluate arbitrary rego
      operationId: evaluate#evaluate
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateRequestBody'
            example:
              input: "{\"message\": \"everyone\"}"
              rego: |-
                package test
                deny["should say hello world"] {input.message != "world"}
        required: true
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluatedPolicy'
              example:
                deny_messages:
                - deployment stage 'example-stage' does not have a HarnessApproval
                  step
                - deployment stage 'example-stage' has step 'run-script' that is forbidden
                  type 'ShellScript'
                error: "policy.rego:25: rego_parse_error: non-terminated string m\
                  \ == \"test"
                output: |-
                  {
                      "deny": [
                          "deployment stage 'deploy' does not have a HarnessApproval step"
                      ],
                      "stages_with_approval": []
                  }
                policy:
                  account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_connector_ref: "."
                  git_default_branch: main
                  git_default_branch_update_error:
                    explanation: "File with given filepath [file.rego] already exists\
                      \ in Github, thus couldn't create a new file"
                    hint: "Please check if there's already a file [file.rego] in Github\
                      \ repository [rego-demo] for the given filepath and branch [main]."
                    message: "Please check if there's already a file [file.rego] in\
                      \ Github repository [rego-demo] for the given filepath and branch\
                      \ [main]."
                  git_default_branch_updated: 1636669297674
                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_file_url: ""
                  git_path: .harness/policy.rego
                  git_repo: "github.com/org/repo,omitempty"
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  updated: 1636669297674
                status: error
        "400":
          description: "PolicySetNotFound: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/evaluate-by-ids:
    post:
      tags:
      - evaluate
      description: Evaluate policy sets by ID
      operationId: evaluate#evaluate-by-ids
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: entity
        in: query
        description: User-supplied global identifier of the entity under evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: User-supplied global identifier of the entity under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
          default: ""
        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
      - name: entityMetadata
        in: query
        description: User-supplied additional metadata for the entity under evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: User-supplied additional metadata for the entity under evaluation
          example: "{\"name\":\"test-entity\"}"
          default: ""
        example: "{\"name\":\"test-entity\"}"
      - name: principalIdentifier
        in: query
        description: Identifier of the principal that triggered the evaluation - must
          be specified in conjunction with 'principalType'
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Identifier of the principal that triggered the evaluation -
            must be specified in conjunction with 'principalType'
          example: aaabbbcccddd
          default: ""
        example: aaabbbcccddd
      - name: principalType
        in: query
        description: Type of principal that triggered the evaluation - must be specified
          in conjunction with 'principalIdentifier'
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Type of principal that triggered the evaluation - must be specified
            in conjunction with 'principalIdentifier'
          example: USER
          default: ""
        example: USER
      - name: userIdentifier
        in: query
        description: "Deprecated: Please use 'principalIdentifier' and 'principalType'\
          \ instead"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "Deprecated: Please use 'principalIdentifier' and 'principalType'\
            \ instead"
          example: Voluptas qui veniam.
          default: ""
        example: Nisi facere eaque.
      - name: ids
        in: query
        description: "Comma-separated list of identifiers for the policy sets that\
          \ should be evaluated, with account. or org. prefixes if needed"
        required: true
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minLength: 1
          type: string
          description: "Comma-separated list of identifiers for the policy sets that\
            \ should be evaluated, with account. or org. prefixes if needed"
          example: "policyset-1,policyset-2,policyset-3"
        example: "policyset-1,policyset-2,policyset-3"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
              example:
                account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
        "400":
          description: "PolicySetNotFound: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/evaluate-by-type:
    post:
      tags:
      - evaluate
      description: Evaluate all policy sets of a specified type
      operationId: evaluate#evaluate-by-type
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: entity
        in: query
        description: User-supplied global identifier of the entity under evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: User-supplied global identifier of the entity under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
          default: ""
        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
      - name: entityMetadata
        in: query
        description: User-supplied additional metadata for the entity under evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: User-supplied additional metadata for the entity under evaluation
          example: "{\"name\":\"test-entity\"}"
          default: ""
        example: "{\"name\":\"test-entity\"}"
      - name: type
        in: query
        description: Type of entity under evaluation
        required: true
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minLength: 1
          type: string
          description: Type of entity under evaluation
          example: pipeline
        example: pipeline
      - name: action
        in: query
        description: Action that triggered the evaluation
        required: true
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minLength: 1
          type: string
          description: Action that triggered the evaluation
          example: onrun
        example: onrun
      - name: principalIdentifier
        in: query
        description: Identifier of the principal that triggered the evaluation - must
          be specified in conjunction with 'principalType'
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Identifier of the principal that triggered the evaluation -
            must be specified in conjunction with 'principalType'
          example: aaabbbcccddd
          default: ""
        example: aaabbbcccddd
      - name: principalType
        in: query
        description: Type of principal that triggered the evaluation - must be specified
          in conjunction with 'principalIdentifier'
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Type of principal that triggered the evaluation - must be specified
            in conjunction with 'principalIdentifier'
          example: USER
          default: ""
        example: USER
      - name: userIdentifier
        in: query
        description: "Deprecated: Please use 'principalIdentifier' and 'principalType'\
          \ instead"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "Deprecated: Please use 'principalIdentifier' and 'principalType'\
            \ instead"
          example: Molestias nostrum dolor.
          default: ""
        example: Explicabo ea excepturi natus unde dolores.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
              example:
                account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
        "400":
          description: "PolicySetNotFound: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/evaluations:
    get:
      tags:
      - evaluations
      description: List evaluations
      operationId: evaluations#list
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: per_page
        in: query
        description: Number of results per page
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          description: Number of results per page
          example: 20
          default: 50
        example: 20
      - name: page
        in: query
        description: Page number (starting from 0)
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          description: Page number (starting from 0)
          example: 4
          default: 0
        example: 4
      - name: entity
        in: query
        description: Filter by the entity associated with the evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Filter by the entity associated with the evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
      - name: type
        in: query
        description: Filter by the type associated with the evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Filter by the type associated with the evaluation
          example: pipeline
        example: pipeline
      - name: action
        in: query
        description: Filter by the action associated with the evaluation
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Filter by the action associated with the evaluation
          example: onrun
        example: onrun
      - name: last_seen
        in: query
        description: Retrieve results starting after this last-seen result
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: integer
          description: Retrieve results starting after this last-seen result
          format: int64
          example: 123
        example: 123
      - name: includeChildScopes
        in: query
        description: "When true, evaluations from child scopes will be inculded in\
          \ the results"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: boolean
          description: "When true, evaluations from child scopes will be inculded\
            \ in the results"
          example: false
          default: false
        example: false
      responses:
        "200":
          description: OK response.
          headers:
            Link:
              description: Link-based paging
              required: true
              style: simple
              explode: false
              schema:
                type: string
                description: Link-based paging
                example: ""
              example: ""
            X-Page-Index:
              description: Page number
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Page number
                format: int64
                example: 4
              example: 4
            X-Page-Item-Count:
              description: Number of results in this page
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Number of results in this page
                format: int64
                example: 20
              example: 20
            X-Page-Size:
              description: Requested page size
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Requested page size
                format: int64
                example: 20
              example: 20
            X-Total-Items:
              description: Total results available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total results available
                format: int64
                example: 230
              example: 230
            X-Total-Pages:
              description: Total pages available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total pages available
                format: int64
                example: 12
              example: 12
          content:
            application/json:
              schema:
                type: array
                example:
                - account_id: XRQAjvT37acOiXx9PRaQMF
                  action: onrun
                  created: 1636370209475
                  details:
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                  entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                  id: 123
                  input: ""
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                - account_id: XRQAjvT37acOiXx9PRaQMF
                  action: onrun
                  created: 1636370209475
                  details:
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    action: onrun
                    created: 1636669297674
                    description: Captures critical production policies
                    details:
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    - deny_messages:
                      - deployment stage 'example-stage' does not have a HarnessApproval
                        step
                      - deployment stage 'example-stage' has step 'run-script' that
                        is forbidden type 'ShellScript'
                      error: "policy.rego:25: rego_parse_error: non-terminated string\
                        \ m == \"test"
                      output: |-
                        {
                            "deny": [
                                "deployment stage 'deploy' does not have a HarnessApproval step"
                            ],
                            "stages_with_approval": []
                        }
                      policy:
                        account_id: eBqAoNchMLKigC_qZ5EdC
                        created: 1636669297674
                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_connector_ref: "."
                        git_default_branch: main
                        git_default_branch_update_error:
                          explanation: "File with given filepath [file.rego] already\
                            \ exists in Github, thus couldn't create a new file"
                          hint: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                          message: "Please check if there's already a file [file.rego]\
                            \ in Github repository [rego-demo] for the given filepath\
                            \ and branch [main]."
                        git_default_branch_updated: 1636669297674
                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                        git_file_url: ""
                        git_path: .harness/policy.rego
                        git_repo: "github.com/org/repo,omitempty"
                        identifier: policy-1
                        name: Pipeline Approval
                        org_id: test-org
                        project_id: test-project
                        rego: ""
                        updated: 1636669297674
                      status: error
                    enabled: true
                    identifier: policyset-1
                    name: Production Policies
                    org_id: test-org
                    project_id: test-project
                    status: error
                    type: pipeline
                    updated: 1636669297674
                  entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                  entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                  id: 123
                  input: ""
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                items:
                  $ref: '#/components/schemas/Evaluation2'
                x-content-type: application/json
              example:
              - account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
              - account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
              - account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
              - account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/evaluations/{id}:
    get:
      tags:
      - evaluations
      description: Find an evaluation by ID
      operationId: evaluations#find
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: id
        in: path
        description: The ID of the evaluation to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the evaluation to retrieve
          format: int64
          example: 123
        example: 123
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
              example:
                account_id: XRQAjvT37acOiXx9PRaQMF
                action: onrun
                created: 1636370209475
                details:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  details:
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  - deny_messages:
                    - deployment stage 'example-stage' does not have a HarnessApproval
                      step
                    - deployment stage 'example-stage' has step 'run-script' that
                      is forbidden type 'ShellScript'
                    error: "policy.rego:25: rego_parse_error: non-terminated string\
                      \ m == \"test"
                    output: |-
                      {
                          "deny": [
                              "deployment stage 'deploy' does not have a HarnessApproval step"
                          ],
                          "stages_with_approval": []
                      }
                    policy:
                      account_id: eBqAoNchMLKigC_qZ5EdC
                      created: 1636669297674
                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_connector_ref: "."
                      git_default_branch: main
                      git_default_branch_update_error:
                        explanation: "File with given filepath [file.rego] already\
                          \ exists in Github, thus couldn't create a new file"
                        hint: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                        message: "Please check if there's already a file [file.rego]\
                          \ in Github repository [rego-demo] for the given filepath\
                          \ and branch [main]."
                      git_default_branch_updated: 1636669297674
                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                      git_file_url: ""
                      git_path: .harness/policy.rego
                      git_repo: "github.com/org/repo,omitempty"
                      identifier: policy-1
                      name: Pipeline Approval
                      org_id: test-org
                      project_id: test-project
                      rego: ""
                      updated: 1636669297674
                    status: error
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  project_id: test-project
                  status: error
                  type: pipeline
                  updated: 1636669297674
                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
                id: 123
                input: ""
                org_id: test-org
                project_id: test-project
                status: error
                type: pipeline
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
  /api/v1/examples:
    get:
      tags:
      - examples
      description: list examples
      operationId: examples#list
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Consequatur ea.
        example: Molestias qui cupiditate sint.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                type: array
                example:
                - desc: This is a pipeline example
                  input: "{\"message\": \"everyone\"}"
                  name: Pipeline example
                  rego: |-
                    package test
                    deny["should say hello world"] {input.message != "world"}
                  type: pipeline
                - desc: This is a pipeline example
                  input: "{\"message\": \"everyone\"}"
                  name: Pipeline example
                  rego: |-
                    package test
                    deny["should say hello world"] {input.message != "world"}
                  type: pipeline
                - desc: This is a pipeline example
                  input: "{\"message\": \"everyone\"}"
                  name: Pipeline example
                  rego: |-
                    package test
                    deny["should say hello world"] {input.message != "world"}
                  type: pipeline
                items:
                  $ref: '#/components/schemas/PolicyExample'
                x-content-type: application/json
              example:
              - desc: This is a pipeline example
                input: "{\"message\": \"everyone\"}"
                name: Pipeline example
                rego: |-
                  package test
                  deny["should say hello world"] {input.message != "world"}
                type: pipeline
              - desc: This is a pipeline example
                input: "{\"message\": \"everyone\"}"
                name: Pipeline example
                rego: |-
                  package test
                  deny["should say hello world"] {input.message != "world"}
                type: pipeline
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
  /api/v1/policies:
    get:
      tags:
      - policies
      description: List all policies
      operationId: policies#list
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: per_page
        in: query
        description: Number of results per page
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          description: Number of results per page
          example: 20
          default: 50
        example: 20
      - name: page
        in: query
        description: Page number (starting from 0)
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          description: Page number (starting from 0)
          example: 4
          default: 0
        example: 4
      - name: searchTerm
        in: query
        description: Filter results by partial name match
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Filter results by partial name match
          example: poli
          default: ""
        example: poli
      - name: sort
        in: query
        description: Sort order for results
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Sort order for results
          example: "name,ASC"
          default: "name,ASC"
          enum:
          - "name,ASC"
          - "name,DESC"
          - "updated,ASC"
          - "updated,DESC"
        example: "name,DESC"
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Harum aliquam facere.
        example: Adipisci et nesciunt libero.
      responses:
        "200":
          description: OK response.
          headers:
            Link:
              description: Link-based paging
              required: true
              style: simple
              explode: false
              schema:
                type: string
                description: Link-based paging
                example: ""
              example: ""
            X-Page-Index:
              description: Page number
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Page number
                format: int64
                example: 4
              example: 4
            X-Page-Item-Count:
              description: Number of results in this page
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Number of results in this page
                format: int64
                example: 20
              example: 20
            X-Page-Size:
              description: Requested page size
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Requested page size
                format: int64
                example: 20
              example: 20
            X-Total-Items:
              description: Total results available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total results available
                format: int64
                example: 230
              example: 230
            X-Total-Pages:
              description: Total pages available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total pages available
                format: int64
                example: 12
              example: 12
          content:
            application/json:
              schema:
                type: array
                example:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_connector_ref: "."
                  git_default_branch: main
                  git_default_branch_update_error:
                    explanation: "File with given filepath [file.rego] already exists\
                      \ in Github, thus couldn't create a new file"
                    hint: "Please check if there's already a file [file.rego] in Github\
                      \ repository [rego-demo] for the given filepath and branch [main]."
                    message: "Please check if there's already a file [file.rego] in\
                      \ Github repository [rego-demo] for the given filepath and branch\
                      \ [main]."
                  git_default_branch_updated: 1636669297674
                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_file_url: ""
                  git_path: .harness/policy.rego
                  git_repo: "github.com/org/repo,omitempty"
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_connector_ref: "."
                  git_default_branch: main
                  git_default_branch_update_error:
                    explanation: "File with given filepath [file.rego] already exists\
                      \ in Github, thus couldn't create a new file"
                    hint: "Please check if there's already a file [file.rego] in Github\
                      \ repository [rego-demo] for the given filepath and branch [main]."
                    message: "Please check if there's already a file [file.rego] in\
                      \ Github repository [rego-demo] for the given filepath and branch\
                      \ [main]."
                  git_default_branch_updated: 1636669297674
                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                  git_file_url: ""
                  git_path: .harness/policy.rego
                  git_repo: "github.com/org/repo,omitempty"
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  updated: 1636669297674
                items:
                  $ref: '#/components/schemas/Policy'
                x-content-type: application/json
              example:
              - account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              - account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
        "400":
          description: "GitError: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    post:
      tags:
      - policies
      description: Create a policy
      operationId: policies#create
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: sto
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: cv
      - name: git_commit_msg
        in: query
        description: The commit message used in git when creating the policy
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The commit message used in git when creating the policy
          example: harness policy commit msg
        example: harness policy commit msg
      - name: git_import
        in: query
        description: A flag to determine if the api should try and import and existing
          policy from git
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: boolean
          description: A flag to determine if the api should try and import and existing
            policy from git
          example: true
        example: true
      - name: git_branch
        in: query
        description: The git branch the policy will be created in
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The git branch the policy will be created in
          example: main
        example: main
      - name: git_is_new_branch
        in: query
        description: A flag to determine if the api should try and commit to a new
          branch
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: boolean
          description: A flag to determine if the api should try and commit to a new
            branch
          example: true
        example: true
      - name: git_base_branch
        in: query
        description: "If committing to a new branch, git_base_branch tells the api\
          \ which branch to base the new branch from"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "If committing to a new branch, git_base_branch tells the api\
            \ which branch to base the new branch from"
          example: main
        example: main
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Quis enim alias deserunt repudiandae quidem est.
        example: Laudantium ea unde consequuntur.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestBody'
            example:
              git_connector_ref: "."
              git_path: .harness/policy.rego
              git_repo: github.com/org/repo
              identifier: policy-1
              name: Check that an approval step is present
              rego: |-
                package test
                deny["should say hello world"] {input.message != "world"}
        required: true
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
              example:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
        "400":
          description: "GitError: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
  /api/v1/policies/{identifier}:
    get:
      tags:
      - policies
      description: Find a policy by identifier
      operationId: policies#find
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: git_branch
        in: query
        description: The git branch the policy resides in
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The git branch the policy resides in
          example: main
        example: main
      - name: identifier
        in: path
        description: Identifier of the policy to retrieve
        required: true
        style: simple
        explode: false
        schema:
          minLength: 1
          type: string
          description: Identifier of the policy to retrieve
          example: policy-1
        example: policy-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Nihil molestias iure iste aliquam excepturi hic.
        example: Et voluptate nobis ex quis distinctio quis.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
              example:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
        "400":
          description: "GitError: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    delete:
      tags:
      - policies
      description: Delete a policy by identifier
      operationId: policies#delete
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: ci
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: sto
      - name: identifier
        in: path
        description: Identifier of the policy
        required: true
        style: simple
        explode: false
        schema:
          minLength: 1
          type: string
          description: Identifier of the policy
          example: policy-1
        example: policy-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Est quidem explicabo pariatur qui.
        example: Molestiae non eaque et sunt.
      responses:
        "204":
          description: No Content response.
        "400":
          description: "GitError: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    patch:
      tags:
      - policies
      description: Update a policy by identifier
      operationId: policies#update
      parameters:
      - name: git_commit_msg
        in: query
        description: The commit message used in git when creating the policy
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The commit message used in git when creating the policy
          example: harness policy commit msg
        example: harness policy commit msg
      - name: git_is_new_branch
        in: query
        description: A flag to determine if the api should try and commit to a new
          branch
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: boolean
          description: A flag to determine if the api should try and commit to a new
            branch
          example: true
        example: true
      - name: git_base_branch
        in: query
        description: "If committing to a new branch, git_base_branch tells the api\
          \ which branch to base the new branch from"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "If committing to a new branch, git_base_branch tells the api\
            \ which branch to base the new branch from"
          example: main
        example: main
      - name: git_branch
        in: query
        description: The git branch the policy resides in
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The git branch the policy resides in
          example: main
        example: main
      - name: git_commit_sha
        in: query
        description: The existing commit sha of the file being updated
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The existing commit sha of the file being updated
          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
      - name: git_file_id
        in: query
        description: The existing file if od the bile being updated
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: The existing file if od the bile being updated
          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: cd
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: cf
      - name: identifier
        in: path
        description: Identifier of the policy
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Identifier of the policy
          example: policy-1
        example: policy-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Accusantium quidem unde harum harum.
        example: Ut dolores quae.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestBody'
            example:
              name: Check that an approval step is present
              rego: |-
                package test
                deny["should say hello world"] {input.message != "world"}
        required: true
      responses:
        "204":
          description: No Content response.
        "400":
          description: "GitError: Bad Request response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
  /api/v1/policysets:
    get:
      tags:
      - policysets
      description: List all policy sets
      operationId: policysets#list
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: per_page
        in: query
        description: Number of results per page
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          description: Number of results per page
          example: 20
          default: 50
        example: 20
      - name: page
        in: query
        description: Page number (starting from 0)
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          description: Page number (starting from 0)
          example: 4
          default: 0
        example: 4
      - name: searchTerm
        in: query
        description: Filter results by partial name match
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Filter results by partial name match
          example: poli
          default: ""
        example: poli
      - name: sort
        in: query
        description: Sort order for results
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Sort order for results
          example: "updated,ASC"
          default: "name,ASC"
          enum:
          - "name,ASC"
          - "name,DESC"
          - "updated,ASC"
          - "updated,DESC"
        example: "updated,ASC"
      - name: type
        in: query
        description: Filter results by type
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minLength: 1
          type: string
          description: Filter results by type
          example: pipeline
        example: pipeline
      - name: action
        in: query
        description: Filter results by action
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          minLength: 1
          type: string
          description: Filter results by action
          example: onrun
        example: onrun
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Aliquid soluta repellendus numquam.
        example: Eos inventore temporibus.
      responses:
        "200":
          description: OK response.
          headers:
            Link:
              description: Link-based paging
              required: true
              style: simple
              explode: false
              schema:
                type: string
                description: Link-based paging
                example: ""
              example: ""
            X-Page-Index:
              description: Page number
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Page number
                format: int64
                example: 4
              example: 4
            X-Page-Item-Count:
              description: Number of results in this page
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Number of results in this page
                format: int64
                example: 20
              example: 20
            X-Page-Size:
              description: Requested page size
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Requested page size
                format: int64
                example: 20
              example: 20
            X-Total-Items:
              description: Total results available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total results available
                format: int64
                example: 230
              example: 230
            X-Total-Pages:
              description: Total pages available
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                description: Total pages available
                format: int64
                example: 12
              example: 12
          content:
            application/json:
              schema:
                type: array
                example:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  policies:
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  project_id: test-project
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  policies:
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  project_id: test-project
                  type: pipeline
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  action: onrun
                  created: 1636669297674
                  description: Captures critical production policies
                  enabled: true
                  identifier: policyset-1
                  name: Production Policies
                  org_id: test-org
                  policies:
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  - account_id: eBqAoNchMLKigC_qZ5EdC
                    created: 1636669297674
                    identifier: policy-1
                    name: Pipeline Approval
                    org_id: test-org
                    project_id: test-project
                    rego: ""
                    severity: warning
                    updated: 1636669297674
                  project_id: test-project
                  type: pipeline
                  updated: 1636669297674
                items:
                  $ref: '#/components/schemas/PolicySet'
                x-content-type: application/json
              example:
              - account_id: eBqAoNchMLKigC_qZ5EdC
                action: onrun
                created: 1636669297674
                description: Captures critical production policies
                enabled: true
                identifier: policyset-1
                name: Production Policies
                org_id: test-org
                policies:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                project_id: test-project
                type: pipeline
                updated: 1636669297674
              - account_id: eBqAoNchMLKigC_qZ5EdC
                action: onrun
                created: 1636669297674
                description: Captures critical production policies
                enabled: true
                identifier: policyset-1
                name: Production Policies
                org_id: test-org
                policies:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                project_id: test-project
                type: pipeline
                updated: 1636669297674
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    post:
      tags:
      - policysets
      description: Create a policy set
      operationId: policysets#create
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: cd
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: cv
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Et dolores cum.
        example: Sed perspiciatis debitis.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestBody2'
            example:
              action: onrun
              description: Captures critical production policies
              enabled: true
              identifier: policyset-1
              name: Production Policies
              type: pipeline
        required: true
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicySet2'
              example:
                account_id: eBqAoNchMLKigC_qZ5EdC
                action: onrun
                created: 1636669297674
                description: Captures critical production policies
                enabled: true
                identifier: policyset-1
                name: Production Policies
                org_id: test-org
                policies:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                project_id: test-project
                type: pipeline
                updated: 1636669297674
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
  /api/v1/policysets/{identifier}:
    get:
      tags:
      - policysets
      description: Find a policy set by identifier
      operationId: policysets#find
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: identifier
        in: path
        description: Identifier of the policy set to retrieve
        required: true
        style: simple
        explode: false
        schema:
          minLength: 1
          type: string
          description: Identifier of the policy set to retrieve
          example: policyset-1
        example: policyset-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Ad quo sequi animi perspiciatis.
        example: Maiores quia et fugiat cum architecto.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicySet2'
              example:
                account_id: eBqAoNchMLKigC_qZ5EdC
                action: onrun
                created: 1636669297674
                description: Captures critical production policies
                enabled: true
                identifier: policyset-1
                name: Production Policies
                org_id: test-org
                policies:
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                - account_id: eBqAoNchMLKigC_qZ5EdC
                  created: 1636669297674
                  identifier: policy-1
                  name: Pipeline Approval
                  org_id: test-org
                  project_id: test-project
                  rego: ""
                  severity: warning
                  updated: 1636669297674
                project_id: test-project
                type: pipeline
                updated: 1636669297674
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    delete:
      tags:
      - policysets
      description: Delete a policy set by identifier
      operationId: policysets#delete
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: cd
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: cd
      - name: identifier
        in: path
        description: Identifier of the policy set
        required: true
        style: simple
        explode: false
        schema:
          minLength: 1
          type: string
          description: Identifier of the policy set
          example: policyset-1
        example: policyset-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Veniam cum praesentium et corrupti harum.
        example: Enim velit exercitationem natus voluptatem placeat occaecati.
      responses:
        "204":
          description: No Content response.
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
    patch:
      tags:
      - policysets
      description: Update a policy set by identifier
      operationId: policysets#update
      parameters:
      - name: accountIdentifier
        in: query
        description: Harness account ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness account ID
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        example: eBqAoNchMLKigC_qZ5EdC
      - name: orgIdentifier
        in: query
        description: Harness organization ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness organization ID
          example: test-org
          default: ""
        example: test-org
      - name: projectIdentifier
        in: query
        description: Harness project ID
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: Harness project ID
          example: test-project
          default: ""
        example: test-project
      - name: module
        in: query
        description: "The module in which the resource was created, updated or deleted.\
          \ Only relevant in the context of a project"
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
          description: "The module in which the resource was created, updated or deleted.\
            \ Only relevant in the context of a project"
          example: cf
          enum:
          - cd
          - cf
          - ci
          - sto
          - cv
        example: cf
      - name: identifier
        in: path
        description: Identifier of the policy set
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Identifier of the policy set
          example: policyset-1
        example: policyset-1
      - name: x-api-key
        in: header
        description: Harness PAT key used to perform authorization
        required: false
        style: simple
        explode: false
        schema:
          type: string
          description: Harness PAT key used to perform authorization
          example: Quo voluptatum minima nulla facere.
        example: Unde quidem et sint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestBody2'
            example:
              action: onrun
              description: Captures critical production policies
              enabled: true
              name: Production Policies
              policies:
              - identifier: policy-1
                severity: warning
              - identifier: policy-1
                severity: warning
              - identifier: policy-1
                severity: warning
              - identifier: policy-1
                severity: warning
              type: pipeline
        required: true
      responses:
        "204":
          description: No Content response.
        "400":
          description: "BadRequest: Bad Request response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Unauthorized response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Forbidden response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: "NotFound: Not Found response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - jwt_header_Authorization:
        - core_governancePolicy_view
        - core_governancePolicy_edit
        - core_governancePolicy_delete
        - core_governancePolicySets_view
        - core_governancePolicySets_edit
        - core_governancePolicySets_delete
        - core_governancePolicySets_evaluate
        - core_governance_admin
      - api_key_header_x-api-key: []
  /api/v1/system/health:
    get:
      tags:
      - system
      description: Check service health
      operationId: system#health
      responses:
        "204":
          description: No Content response.
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/system/version:
    get:
      tags:
      - system
      description: Check service version
      operationId: system#version
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceVersion'
              example:
                commit: 96381692bf3a2bd7904769c6886e832435768b57
                version: v0.123.0
        "500":
          description: "InternalServer: Internal Server Error response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: "BadGateway: Bad Gateway response."
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AggregateStatus:
      required:
      - error
      - pass
      - time
      - warning
      type: object
      properties:
        error:
          type: integer
          description: Count of evaluations that have a status of 'error'
          format: int64
          example: 6131954873636422800
        pass:
          type: integer
          description: Count of evaluations that have a status of 'pass'
          format: int64
          example: 6122119631547907047
        time:
          type: integer
          description: The Unix time of this particular aggregation
          format: int64
          example: 4891691738930437908
        warning:
          type: integer
          description: Count of evaluations that have a status of 'warning'
          format: int64
          example: 4996866704380369589
      description: Aggregate metrics for evaluations on a single day
      example:
        error: 2174285678586957279
        pass: 6713433384340029592
        time: 1299583733304690280
        warning: 2581612184076268921
    CreateRequestBody:
      required:
      - account_id
      - created
      - identifier
      - name
      - org_id
      - project_id
      - rego
      - updated
      type: object
      properties:
        git_connector_ref:
          type: string
          description: The harness connector used for authenticating on the git provider
          example: "."
        git_path:
          type: string
          description: The path to the file in the git repo
          example: .harness/policy.rego
        git_repo:
          type: string
          description: The git repo the policy resides in
          example: github.com/org/repo
        identifier:
          minLength: 1
          type: string
          description: Identifier for the policy
          example: policy-1
        name:
          minLength: 1
          type: string
          description: Name of the policy
          example: Check that an approval step is present
        rego:
          minLength: 1
          type: string
          description: Rego that defines the policy policy
          example: |-
            package test
            deny["should say hello world"] {input.message != "world"}
      example:
        git_connector_ref: "."
        git_path: .harness/policy.rego
        git_repo: github.com/org/repo
        identifier: policy-1
        name: Check that an approval step is present
        rego: |-
          package test
          deny["should say hello world"] {input.message != "world"}
    CreateRequestBody2:
      required:
      - account_id
      - action
      - created
      - enabled
      - identifier
      - name
      - org_id
      - project_id
      - type
      - updated
      type: object
      properties:
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        identifier:
          minLength: 1
          type: string
          description: Identifier for the policy set
          example: policyset-1
        name:
          minLength: 1
          type: string
          description: Name of the policy set
          example: Production Policies
        type:
          minLength: 1
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
      example:
        action: onrun
        description: Captures critical production policies
        enabled: true
        identifier: policyset-1
        name: Production Policies
        type: pipeline
    DashboardMetrics:
      required:
      - aggregates
      - policy_health
      type: object
      properties:
        aggregates:
          type: array
          description: Aggregate evaluation counts by day
          example:
          - error: 1201513832267580740
            pass: 2920020791307846359
            time: 461119712411546138
            warning: 6971582622373151866
          - error: 1201513832267580740
            pass: 2920020791307846359
            time: 461119712411546138
            warning: 6971582622373151866
          - error: 1201513832267580740
            pass: 2920020791307846359
            time: 461119712411546138
            warning: 6971582622373151866
          items:
            $ref: '#/components/schemas/AggregateStatus'
        policy_health:
          $ref: '#/components/schemas/PolicyHealth'
      example:
        aggregates:
        - error: 1201513832267580740
          pass: 2920020791307846359
          time: 461119712411546138
          warning: 6971582622373151866
        - error: 1201513832267580740
          pass: 2920020791307846359
          time: 461119712411546138
          warning: 6971582622373151866
        - error: 1201513832267580740
          pass: 2920020791307846359
          time: 461119712411546138
          warning: 6971582622373151866
        - error: 1201513832267580740
          pass: 2920020791307846359
          time: 461119712411546138
          warning: 6971582622373151866
        policy_health:
          total_evaluation_count: 7467880620589340301
          total_evaluation_entity_count:
            error: 4962770580155356801
            pass: 1838564234748219477
            warning: 6712404284550845579
          total_policy_count: 1018281497905076142
          total_policy_set_count: 4767159674574934953
          total_policy_set_entity_count:
            A ut.: 8823333786778254735
    Error:
      required:
      - fault
      - id
      - message
      - name
      - temporary
      - timeout
      type: object
      properties:
        fault:
          type: boolean
          description: Is the error a server-side fault?
          example: true
        id:
          type: string
          description: ID is a unique identifier for this particular occurrence of
            the problem.
          example: 123abc
        message:
          type: string
          description: Message is a human-readable explanation specific to this occurrence
            of the problem.
          example: parameter 'p' must be an integer
        name:
          type: string
          description: Name is the name of this class of errors.
          example: bad_request
        temporary:
          type: boolean
          description: Is the error temporary?
          example: true
        timeout:
          type: boolean
          description: Is the error a timeout?
          example: false
      example:
        id: 3F1FKVRR
        message: Value of ID must be an integer
        name: bad_request
    ErrorResultWithIdentifier:
      required:
      - fault
      - id
      - message
      - name
      - temporary
      - timeout
      type: object
      properties:
        fault:
          type: boolean
          description: Is the error a server-side fault?
          example: false
        id:
          type: string
          description: ID is a unique identifier for this particular occurrence of
            the problem.
          example: 123abc
        identifier:
          type: string
          description: the identifier associated with the error
          example: policy-1
        message:
          type: string
          description: Message is a human-readable explanation specific to this occurrence
            of the problem.
          example: parameter 'p' must be an integer
        name:
          type: string
          description: Name is the name of this class of errors.
          example: bad_request
        temporary:
          type: boolean
          description: Is the error temporary?
          example: true
        timeout:
          type: boolean
          description: Is the error a timeout?
          example: true
      example:
        fault: false
        id: 123abc
        identifier: policy-1
        message: parameter 'p' must be an integer
        name: bad_request
        temporary: true
        timeout: false
    EvaluateRequestBody:
      required:
      - input
      - rego
      type: object
      properties:
        input:
          type: string
          description: Input to evaluate
          format: binary
          example: !!binary |-
            eyJtZXNzYWdlIjogImV2ZXJ5b25lIn0=
        rego:
          minLength: 1
          type: string
          description: Arbitrary rego to be evaluated
          example: |-
            package test
            deny["should say hello world"] {input.message != "world"}
      example:
        input: "{\"message\": \"everyone\"}"
        rego: |-
          package test
          deny["should say hello world"] {input.message != "world"}
    EvaluatedPolicy:
      required:
      - deny_messages
      - error
      - output
      - policy
      - status
      type: object
      properties:
        deny_messages:
          type: array
          description: The values of any `deny` rego rules as returned by the rego
            engine
          example:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          items:
            type: string
            example: Quia animi et harum velit officia.
        error:
          type: string
          description: Any errors returned by the rego engine when this policy was
            evaluated
          example: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
        output:
          type: string
          description: The output returned by the rego engine when this policy was
            evaluated
          format: binary
          example: !!binary |-
            ewogICAgImRlbnkiOiBbCiAgICAgICAgImRlcGxveW1lbnQgc3RhZ2UgJ2RlcGxveScgZG9lcyBu
            b3QgaGF2ZSBhIEhhcm5lc3NBcHByb3ZhbCBzdGVwIgogICAgXSwKICAgICJzdGFnZXNfd2l0aF9h
            cHByb3ZhbCI6IFtdCn0=
        policy:
          $ref: '#/components/schemas/Policy'
        status:
          type: string
          description: The overall status for this individual policy indicating whether
            it passed
          example: error
          enum:
          - error
          - warning
          - pass
      example:
        deny_messages:
        - deployment stage 'example-stage' does not have a HarnessApproval step
        - deployment stage 'example-stage' has step 'run-script' that is forbidden
          type 'ShellScript'
        error: "policy.rego:25: rego_parse_error: non-terminated string m == \"test"
        output: |-
          {
              "deny": [
                  "deployment stage 'deploy' does not have a HarnessApproval step"
              ],
              "stages_with_approval": []
          }
        policy:
          account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
          git_connector_ref: "."
          git_default_branch: main
          git_default_branch_update_error:
            explanation: "File with given filepath [file.rego] already exists in Github,\
              \ thus couldn't create a new file"
            hint: "Please check if there's already a file [file.rego] in Github repository\
              \ [rego-demo] for the given filepath and branch [main]."
            message: "Please check if there's already a file [file.rego] in Github\
              \ repository [rego-demo] for the given filepath and branch [main]."
          git_default_branch_updated: 1636669297674
          git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
          git_file_url: ""
          git_path: .harness/policy.rego
          git_repo: "github.com/org/repo,omitempty"
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          updated: 1636669297674
        status: error
    Evaluation:
      required:
      - account_id
      - action
      - created
      - details
      - entity
      - entity_metadata
      - id
      - input
      - org_id
      - project_id
      - status
      - type
      type: object
      properties:
        account_id:
          type: string
          description: The Harness account in which the evaluation was performed
          example: XRQAjvT37acOiXx9PRaQMF
        action:
          type: string
          description: The action that triggered evaluation
          example: onrun
        created:
          type: integer
          description: The time at which the evaluation was performed in Unix time
            millseconds
          format: int64
          example: 1636370209475
        details:
          type: array
          description: The detailed results of te evaluation
          example:
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          items:
            $ref: '#/components/schemas/EvaluationDetail'
        entity:
          type: string
          description: An arbtrary user-supplied string that globally identifies the
            entity under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        entity_metadata:
          type: string
          description: Additional arbtrary user-supplied metadta about the entity
            under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        id:
          type: integer
          description: The ID of this evaluation
          format: int64
          example: 123
        input:
          type: string
          description: The input provided at evaluation time
          format: binary
          example: !!binary ""
        org_id:
          type: string
          description: The Harness organisation in which the evaluation was performed
          example: test-org
        project_id:
          type: string
          description: The Harness project in which the evaluation was performed
          example: test-project
        status:
          type: string
          description: The overall status of the evaluation indicating whether it
            passed
          example: error
          enum:
          - error
          - warning
          - pass
        type:
          type: string
          description: The type of the entity under evaluation
          example: pipeline
      example:
        account_id: XRQAjvT37acOiXx9PRaQMF
        action: onrun
        created: 1636370209475
        details:
        - account_id: eBqAoNchMLKigC_qZ5EdC
          action: onrun
          created: 1636669297674
          description: Captures critical production policies
          details:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          enabled: true
          identifier: policyset-1
          name: Production Policies
          org_id: test-org
          project_id: test-project
          status: error
          type: pipeline
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          action: onrun
          created: 1636669297674
          description: Captures critical production policies
          details:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          enabled: true
          identifier: policyset-1
          name: Production Policies
          org_id: test-org
          project_id: test-project
          status: error
          type: pipeline
          updated: 1636669297674
        entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        id: 123
        input: ""
        org_id: test-org
        project_id: test-project
        status: error
        type: pipeline
    Evaluation2:
      required:
      - account_id
      - action
      - created
      - details
      - entity
      - entity_metadata
      - id
      - input
      - org_id
      - project_id
      - status
      - type
      type: object
      properties:
        account_id:
          type: string
          description: The Harness account in which the evaluation was performed
          example: XRQAjvT37acOiXx9PRaQMF
        action:
          type: string
          description: The action that triggered evaluation
          example: onrun
        created:
          type: integer
          description: The time at which the evaluation was performed in Unix time
            millseconds
          format: int64
          example: 1636370209475
        details:
          type: array
          description: The detailed results of te evaluation
          example:
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            action: onrun
            created: 1636669297674
            description: Captures critical production policies
            details:
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            - deny_messages:
              - deployment stage 'example-stage' does not have a HarnessApproval step
              - deployment stage 'example-stage' has step 'run-script' that is forbidden
                type 'ShellScript'
              error: "policy.rego:25: rego_parse_error: non-terminated string m ==\
                \ \"test"
              output: |-
                {
                    "deny": [
                        "deployment stage 'deploy' does not have a HarnessApproval step"
                    ],
                    "stages_with_approval": []
                }
              policy:
                account_id: eBqAoNchMLKigC_qZ5EdC
                created: 1636669297674
                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_connector_ref: "."
                git_default_branch: main
                git_default_branch_update_error:
                  explanation: "File with given filepath [file.rego] already exists\
                    \ in Github, thus couldn't create a new file"
                  hint: "Please check if there's already a file [file.rego] in Github\
                    \ repository [rego-demo] for the given filepath and branch [main]."
                  message: "Please check if there's already a file [file.rego] in\
                    \ Github repository [rego-demo] for the given filepath and branch\
                    \ [main]."
                git_default_branch_updated: 1636669297674
                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
                git_file_url: ""
                git_path: .harness/policy.rego
                git_repo: "github.com/org/repo,omitempty"
                identifier: policy-1
                name: Pipeline Approval
                org_id: test-org
                project_id: test-project
                rego: ""
                updated: 1636669297674
              status: error
            enabled: true
            identifier: policyset-1
            name: Production Policies
            org_id: test-org
            project_id: test-project
            status: error
            type: pipeline
            updated: 1636669297674
          items:
            $ref: '#/components/schemas/EvaluationDetail2'
        entity:
          type: string
          description: An arbtrary user-supplied string that globally identifies the
            entity under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        entity_metadata:
          type: string
          description: Additional arbtrary user-supplied metadta about the entity
            under evaluation
          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        id:
          type: integer
          description: The ID of this evaluation
          format: int64
          example: 123
        input:
          type: string
          description: The input provided at evaluation time
          format: binary
          example: !!binary ""
        org_id:
          type: string
          description: The Harness organisation in which the evaluation was performed
          example: test-org
        project_id:
          type: string
          description: The Harness project in which the evaluation was performed
          example: test-project
        status:
          type: string
          description: The overall status of the evaluation indicating whether it
            passed
          example: error
          enum:
          - error
          - warning
          - pass
        type:
          type: string
          description: The type of the entity under evaluation
          example: pipeline
      description: The result of a single evaluation
      example:
        account_id: XRQAjvT37acOiXx9PRaQMF
        action: onrun
        created: 1636370209475
        details:
        - account_id: eBqAoNchMLKigC_qZ5EdC
          action: onrun
          created: 1636669297674
          description: Captures critical production policies
          details:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          enabled: true
          identifier: policyset-1
          name: Production Policies
          org_id: test-org
          project_id: test-project
          status: error
          type: pipeline
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          action: onrun
          created: 1636669297674
          description: Captures critical production policies
          details:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          enabled: true
          identifier: policyset-1
          name: Production Policies
          org_id: test-org
          project_id: test-project
          status: error
          type: pipeline
          updated: 1636669297674
        entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e
        id: 123
        input: ""
        org_id: test-org
        project_id: test-project
        status: error
        type: pipeline
    EvaluationCounts:
      required:
      - error
      - pass
      - warning
      type: object
      properties:
        error:
          type: integer
          description: Count of evaluations that have a status of 'error'
          format: int64
          example: 4970251986521508580
        pass:
          type: integer
          description: Count of evaluations that have a status of 'pass'
          format: int64
          example: 307083773713586752
        warning:
          type: integer
          description: Count of evaluations that have a status of 'warning'
          format: int64
          example: 1502739105740891635
      description: Evaluation counts by status
      example:
        error: 5942734405936107822
        pass: 4691718722125000343
        warning: 690944801675665669
    EvaluationDetail:
      required:
      - account_id
      - action
      - created
      - details
      - enabled
      - identifier
      - name
      - org_id
      - project_id
      - status
      - type
      - updated
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy set
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        created:
          type: integer
          description: Time the policy set was created
          format: int64
          example: 1636669297674
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        details:
          type: array
          example:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          items:
            $ref: '#/components/schemas/EvaluatedPolicy'
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        identifier:
          minLength: 1
          type: string
          description: Identifier of the policy set
          example: policyset-1
        name:
          minLength: 1
          type: string
          description: Name of the policy set
          example: Production Policies
        org_id:
          type: string
          description: Harness organization ID associated with this policy set
          example: test-org
          default: ""
        project_id:
          type: string
          description: Harness project ID associated with this policy set
          example: test-project
          default: ""
        status:
          type: string
          description: The overall status for this policy set indicating whether it
            passed
          example: error
          enum:
          - error
          - warning
          - pass
        type:
          minLength: 1
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
        updated:
          type: integer
          description: Time the policy set was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        action: onrun
        created: 1636669297674
        description: Captures critical production policies
        details:
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        enabled: true
        identifier: policyset-1
        name: Production Policies
        org_id: test-org
        project_id: test-project
        status: error
        type: pipeline
        updated: 1636669297674
    EvaluationDetail2:
      required:
      - details
      - status
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy set
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        created:
          type: integer
          description: Time the policy set was created
          format: int64
          example: 1636669297674
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        details:
          type: array
          example:
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          - deny_messages:
            - deployment stage 'example-stage' does not have a HarnessApproval step
            - deployment stage 'example-stage' has step 'run-script' that is forbidden
              type 'ShellScript'
            error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
              test"
            output: |-
              {
                  "deny": [
                      "deployment stage 'deploy' does not have a HarnessApproval step"
                  ],
                  "stages_with_approval": []
              }
            policy:
              account_id: eBqAoNchMLKigC_qZ5EdC
              created: 1636669297674
              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_connector_ref: "."
              git_default_branch: main
              git_default_branch_update_error:
                explanation: "File with given filepath [file.rego] already exists\
                  \ in Github, thus couldn't create a new file"
                hint: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
                message: "Please check if there's already a file [file.rego] in Github\
                  \ repository [rego-demo] for the given filepath and branch [main]."
              git_default_branch_updated: 1636669297674
              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
              git_file_url: ""
              git_path: .harness/policy.rego
              git_repo: "github.com/org/repo,omitempty"
              identifier: policy-1
              name: Pipeline Approval
              org_id: test-org
              project_id: test-project
              rego: ""
              updated: 1636669297674
            status: error
          items:
            $ref: '#/components/schemas/EvaluatedPolicy'
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        identifier:
          minLength: 1
          type: string
          description: Identifier of the policy set
          example: policyset-1
        name:
          minLength: 1
          type: string
          description: Name of the policy set
          example: Production Policies
        org_id:
          type: string
          description: Harness organization ID associated with this policy set
          example: test-org
          default: ""
        project_id:
          type: string
          description: Harness project ID associated with this policy set
          example: test-project
          default: ""
        status:
          type: string
          description: The overall status for this policy set indicating whether it
            passed
          example: error
          enum:
          - error
          - warning
          - pass
        type:
          minLength: 1
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
        updated:
          type: integer
          description: Time the policy set was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        action: onrun
        created: 1636669297674
        description: Captures critical production policies
        details:
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        - deny_messages:
          - deployment stage 'example-stage' does not have a HarnessApproval step
          - deployment stage 'example-stage' has step 'run-script' that is forbidden
            type 'ShellScript'
          error: "policy.rego:25: rego_parse_error: non-terminated string m == \"\
            test"
          output: |-
            {
                "deny": [
                    "deployment stage 'deploy' does not have a HarnessApproval step"
                ],
                "stages_with_approval": []
            }
          policy:
            account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_connector_ref: "."
            git_default_branch: main
            git_default_branch_update_error:
              explanation: "File with given filepath [file.rego] already exists in\
                \ Github, thus couldn't create a new file"
              hint: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
              message: "Please check if there's already a file [file.rego] in Github\
                \ repository [rego-demo] for the given filepath and branch [main]."
            git_default_branch_updated: 1636669297674
            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
            git_file_url: ""
            git_path: .harness/policy.rego
            git_repo: "github.com/org/repo,omitempty"
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            updated: 1636669297674
          status: error
        enabled: true
        identifier: policyset-1
        name: Production Policies
        org_id: test-org
        project_id: test-project
        status: error
        type: pipeline
        updated: 1636669297674
    GitErrorResult:
      required:
      - explanation
      - hint
      - message
      type: object
      properties:
        explanation:
          type: string
          description: the explanation of the error
          example: "File with given filepath [file.rego] already exists in Github,\
            \ thus couldn't create a new file"
        hint:
          type: string
          description: the hint on how to resolve the error
          example: "Please check if there's already a file [file.rego] in Github repository\
            \ [rego-demo] for the given filepath and branch [main]."
        message:
          type: string
          description: the message is a human-readable explanation specific to this
            occurrence of the problem
          example: "Please check if there's already a file [file.rego] in Github repository\
            \ [rego-demo] for the given filepath and branch [main]."
      example:
        explanation: "File with given filepath [file.rego] already exists in Github,\
          \ thus couldn't create a new file"
        hint: "Please check if there's already a file [file.rego] in Github repository\
          \ [rego-demo] for the given filepath and branch [main]."
        message: "Please check if there's already a file [file.rego] in Github repository\
          \ [rego-demo] for the given filepath and branch [main]."
    LinkedPolicy:
      required:
      - account_id
      - identifier
      - name
      - org_id
      - project_id
      - severity
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        created:
          type: integer
          description: Time the policy was created
          format: int64
          example: 1636669297674
        identifier:
          minLength: 1
          type: string
          description: identifier of the policy
          example: policy-1
        name:
          minLength: 1
          type: string
          description: Name of the policy
          example: Pipeline Approval
        org_id:
          type: string
          description: Harness organization ID associated with this policy
          example: test-org
          default: ""
        project_id:
          type: string
          description: Harness project ID associated with this policy
          example: test-project
          default: ""
        rego:
          minLength: 1
          type: string
          description: Rego that defines the policy
          example: ""
        severity:
          type: string
          description: The severity of this policy in this context
          example: warning
          enum:
          - warning
          - error
        updated:
          type: integer
          description: Time the policy was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        created: 1636669297674
        identifier: policy-1
        name: Pipeline Approval
        org_id: test-org
        project_id: test-project
        rego: ""
        severity: warning
        updated: 1636669297674
    LinkedPolicy2:
      required:
      - account_id
      - created
      - identifier
      - name
      - org_id
      - project_id
      - rego
      - severity
      - updated
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        created:
          type: integer
          description: Time the policy was created
          format: int64
          example: 1636669297674
        identifier:
          minLength: 1
          type: string
          description: identifier of the policy
          example: policy-1
        name:
          minLength: 1
          type: string
          description: Name of the policy
          example: Pipeline Approval
        org_id:
          type: string
          description: Harness organization ID associated with this policy
          example: test-org
          default: ""
        project_id:
          type: string
          description: Harness project ID associated with this policy
          example: test-project
          default: ""
        rego:
          minLength: 1
          type: string
          description: Rego that defines the policy
          example: ""
        severity:
          type: string
          description: The severity of this policy in this context
          example: warning
          enum:
          - warning
          - error
        updated:
          type: integer
          description: Time the policy was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        created: 1636669297674
        identifier: policy-1
        name: Pipeline Approval
        org_id: test-org
        project_id: test-project
        rego: ""
        severity: warning
        updated: 1636669297674
    Linkedpolicyidentifier:
      required:
      - identifier
      - severity
      type: object
      properties:
        identifier:
          minLength: 1
          type: string
          description: identifier of the policy with account. or org. prefix if needed
          example: policy-1
        severity:
          type: string
          description: The severity of this policy in this context
          example: warning
          enum:
          - warning
          - error
      example:
        identifier: policy-1
        severity: warning
    Policy:
      required:
      - account_id
      - created
      - identifier
      - name
      - org_id
      - project_id
      - rego
      - updated
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        created:
          type: integer
          description: Time the policy was created
          format: int64
          example: 1636669297674
        git_commit_sha:
          type: string
          description: The commit sha of the commit that last effected the file
          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        git_connector_ref:
          type: string
          description: The harness connector used for authenticating on the git provider
          example: "."
        git_default_branch:
          type: string
          description: "The default branch, the service pulls in changes from from\
            \ this branch for policy evaluation"
          example: main
        git_default_branch_update_error:
          $ref: '#/components/schemas/GitErrorResult'
        git_default_branch_updated:
          type: integer
          description: The last time the service successfully pulled in changes from
            the default branch
          format: int64
          example: 1636669297674
        git_file_id:
          type: string
          description: The file if od the bile being updated
          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        git_file_url:
          type: string
          description: The url of the file on the fit provider
          example: ""
        git_path:
          type: string
          description: The path to the file in the git repo
          example: .harness/policy.rego
        git_repo:
          type: string
          description: The git repo the policy resides in
          example: "github.com/org/repo,omitempty"
        identifier:
          minLength: 1
          type: string
          description: identifier of the policy
          example: policy-1
        name:
          minLength: 1
          type: string
          description: Name of the policy
          example: Pipeline Approval
        org_id:
          type: string
          description: Harness organization ID associated with this policy
          example: test-org
          default: ""
        project_id:
          type: string
          description: Harness project ID associated with this policy
          example: test-project
          default: ""
        rego:
          minLength: 1
          type: string
          description: Rego that defines the policy
          example: ""
        updated:
          type: integer
          description: Time the policy was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        created: 1636669297674
        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        git_connector_ref: "."
        git_default_branch: main
        git_default_branch_update_error:
          explanation: "File with given filepath [file.rego] already exists in Github,\
            \ thus couldn't create a new file"
          hint: "Please check if there's already a file [file.rego] in Github repository\
            \ [rego-demo] for the given filepath and branch [main]."
          message: "Please check if there's already a file [file.rego] in Github repository\
            \ [rego-demo] for the given filepath and branch [main]."
        git_default_branch_updated: 1636669297674
        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d
        git_file_url: ""
        git_path: .harness/policy.rego
        git_repo: "github.com/org/repo,omitempty"
        identifier: policy-1
        name: Pipeline Approval
        org_id: test-org
        project_id: test-project
        rego: ""
        updated: 1636669297674
    PolicyExample:
      required:
      - desc
      - input
      - name
      - rego
      - type
      type: object
      properties:
        desc:
          type: string
          description: Longer description of the example
          example: This is a pipeline example
        input:
          type: string
          description: Example input to illustrate the rego policy
          example: "{\"message\": \"everyone\"}"
        name:
          type: string
          description: Example name
          example: Pipeline example
        rego:
          type: string
          description: Example rego policy
          example: |-
            package test
            deny["should say hello world"] {input.message != "world"}
        type:
          type: string
          description: The type of entity illustrated in this example
          example: pipeline
      description: Example policies and input
      example:
        desc: This is a pipeline example
        input: "{\"message\": \"everyone\"}"
        name: Pipeline example
        rego: |-
          package test
          deny["should say hello world"] {input.message != "world"}
        type: pipeline
    PolicyHealth:
      required:
      - total_evaluation_count
      - total_evaluation_entity_count
      - total_policy_count
      - total_policy_set_count
      - total_policy_set_entity_count
      type: object
      properties:
        total_evaluation_count:
          type: integer
          description: Total number of evaluations that have occurred
          format: int64
          example: 3106114819850014595
        total_evaluation_entity_count:
          $ref: '#/components/schemas/EvaluationCounts'
        total_policy_count:
          type: integer
          description: Total number of policies stored
          format: int64
          example: 260032344239716986
        total_policy_set_count:
          type: integer
          description: Total number of policy sets stored
          format: int64
          example: 8273115386678935454
        total_policy_set_entity_count:
          type: object
          additionalProperties:
            type: integer
            format: int64
            example: 1071228818264538870
          description: Total number of policy sets by type
          example:
            Nihil beatae ut.: 3419870533551795433
            Officiis eum.: 2401905417790433514
            Ut et.: 1271161779457622586
      description: Policy health metrics
      example:
        total_evaluation_count: 1514701763360421536
        total_evaluation_entity_count:
          error: 4962770580155356801
          pass: 1838564234748219477
          warning: 6712404284550845579
        total_policy_count: 8782150527953946519
        total_policy_set_count: 137249694436592402
        total_policy_set_entity_count:
          Sequi asperiores molestiae quia architecto reprehenderit.: 8689723557954075770
          Voluptate eos.: 5766037194807765246
    PolicySet:
      required:
      - account_id
      - action
      - created
      - enabled
      - identifier
      - name
      - org_id
      - project_id
      - type
      - updated
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy set
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        created:
          type: integer
          description: Time the policy set was created
          format: int64
          example: 1636669297674
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        identifier:
          minLength: 1
          type: string
          description: Identifier of the policy set
          example: policyset-1
        name:
          minLength: 1
          type: string
          description: Name of the policy set
          example: Production Policies
        org_id:
          type: string
          description: Harness organization ID associated with this policy set
          example: test-org
          default: ""
        policies:
          type: array
          description: Policies linked to this policy set
          example:
          - account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            severity: warning
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            severity: warning
            updated: 1636669297674
          items:
            $ref: '#/components/schemas/LinkedPolicy'
        project_id:
          type: string
          description: Harness project ID associated with this policy set
          example: test-project
          default: ""
        type:
          minLength: 1
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
        updated:
          type: integer
          description: Time the policy set was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        action: onrun
        created: 1636669297674
        description: Captures critical production policies
        enabled: true
        identifier: policyset-1
        name: Production Policies
        org_id: test-org
        policies:
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        project_id: test-project
        type: pipeline
        updated: 1636669297674
    PolicySet2:
      required:
      - account_id
      - action
      - created
      - enabled
      - identifier
      - name
      - org_id
      - project_id
      - type
      - updated
      type: object
      properties:
        account_id:
          type: string
          description: Harness account ID associated with this policy set
          example: eBqAoNchMLKigC_qZ5EdC
          default: ""
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        created:
          type: integer
          description: Time the policy set was created
          format: int64
          example: 1636669297674
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        identifier:
          minLength: 1
          type: string
          description: Identifier of the policy set
          example: policyset-1
        name:
          minLength: 1
          type: string
          description: Name of the policy set
          example: Production Policies
        org_id:
          type: string
          description: Harness organization ID associated with this policy set
          example: test-org
          default: ""
        policies:
          type: array
          description: Policies linked to this policy set
          example:
          - account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            severity: warning
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            severity: warning
            updated: 1636669297674
          - account_id: eBqAoNchMLKigC_qZ5EdC
            created: 1636669297674
            identifier: policy-1
            name: Pipeline Approval
            org_id: test-org
            project_id: test-project
            rego: ""
            severity: warning
            updated: 1636669297674
          items:
            $ref: '#/components/schemas/LinkedPolicy2'
        project_id:
          type: string
          description: Harness project ID associated with this policy set
          example: test-project
          default: ""
        type:
          minLength: 1
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
        updated:
          type: integer
          description: Time the policy set was last updated
          format: int64
          example: 1636669297674
      example:
        account_id: eBqAoNchMLKigC_qZ5EdC
        action: onrun
        created: 1636669297674
        description: Captures critical production policies
        enabled: true
        identifier: policyset-1
        name: Production Policies
        org_id: test-org
        policies:
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        - account_id: eBqAoNchMLKigC_qZ5EdC
          created: 1636669297674
          identifier: policy-1
          name: Pipeline Approval
          org_id: test-org
          project_id: test-project
          rego: ""
          severity: warning
          updated: 1636669297674
        project_id: test-project
        type: pipeline
        updated: 1636669297674
    ServiceVersion:
      required:
      - commit
      - version
      type: object
      properties:
        commit:
          type: string
          description: Build identifier
          example: 96381692bf3a2bd7904769c6886e832435768b57
        version:
          type: string
          description: Version number
          example: v0.123.0
      example:
        commit: 96381692bf3a2bd7904769c6886e832435768b57
        version: v0.123.0
    UpdateRequestBody:
      type: object
      properties:
        name:
          type: string
          description: The name of the policy
          example: Check that an approval step is present
        rego:
          type: string
          description: The rego that defines the policy policy
          example: |-
            package test
            deny["should say hello world"] {input.message != "world"}
      example:
        name: Check that an approval step is present
        rego: |-
          package test
          deny["should say hello world"] {input.message != "world"}
    UpdateRequestBody2:
      type: object
      properties:
        action:
          minLength: 1
          type: string
          description: Action that triggers the policy set
          example: onrun
        description:
          type: string
          description: Description of the policy set
          example: Captures critical production policies
        enabled:
          type: boolean
          description: Only enabled policy sets are evaluated when evaluating by type/action
          example: true
        name:
          type: string
          description: Name of the policy set
          example: Production Policies
        policies:
          type: array
          description: Policies linked to this policy set
          example:
          - identifier: policy-1
            severity: warning
          - identifier: policy-1
            severity: warning
          - identifier: policy-1
            severity: warning
          - identifier: policy-1
            severity: warning
          items:
            $ref: '#/components/schemas/Linkedpolicyidentifier'
        type:
          type: string
          description: Type of input suitable for the policy set
          example: pipeline
      example:
        action: onrun
        description: Captures critical production policies
        enabled: true
        name: Production Policies
        policies:
        - identifier: policy-1
          severity: warning
        - identifier: policy-1
          severity: warning
        - identifier: policy-1
          severity: warning
        type: pipeline
  securitySchemes:
    api_key_header_x-api-key:
      type: apiKey
      description: Harness PAT
      name: x-api-key
      in: header
    jwt_header_Authorization:
      type: http
      scheme: bearer
